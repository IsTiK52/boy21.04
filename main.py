import os
import telebot
import json
import datetime
import requests

BOT_TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

SCHEDULE_PATH = "words_schedule.json"
PROGRESS_PATH = "storage/progress.csv"
REPETITION_PATH = "storage/repetition.json"
ESSAY_DIR = "storage/essays/"

def get_today_words():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    with open(SCHEDULE_PATH, encoding="utf-8") as f:
        schedule = json.load(f)
    return schedule.get(today)

def check_word_usage(words, text):
    return [w["word"] for w in words if w["word"].lower() in text.lower()]

@bot.message_handler(commands=["start", "menu"])
def show_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìò –°–ª–æ–≤–∞ –¥–Ω—è", "‚úçÔ∏è –ü—Ä–∏—Å–ª–∞—Ç—å —ç—Å—Å–µ")
    markup.add("üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def menu(message):
    if message.text == "üìò –°–ª–æ–≤–∞ –¥–Ω—è":
        data = get_today_words()
        if not data:
            bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –Ω–µ—Ç.")
            return
        theme = data["theme"]
        text = f"üéØ –¢–µ–º–∞: {theme}\n\n"
        for w in data["words"]:
            text += f"üîπ *{w['word']}* ({w['pos']}) ‚Äî {w['translation']}\n_{w['example']}_\n\n"
        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    elif message.text == "‚úçÔ∏è –ü—Ä–∏—Å–ª–∞—Ç—å —ç—Å—Å–µ":
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —ç—Å—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        bot.register_next_step_handler(msg, handle_essay)
    elif message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ":
        with open(REPETITION_PATH, encoding="utf-8") as f:
            rep = json.load(f)
        words = rep.get(str(message.from_user.id), [])
        text = "\n".join(f"üîÅ {w}" for w in words) or "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
        bot.send_message(message.chat.id, text)
    elif message.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        with open(PROGRESS_PATH, encoding="utf-8") as f:
            lines = f.readlines()[1:]
        count = len([line for line in lines if str(message.from_user.id) in line])
        bot.send_message(message.chat.id, f"üìà –≠—Å—Å–µ —Å–¥–∞–Ω–æ: {count}")
    elif message.text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚ù§Ô∏è\nüì≤ Kaspi Gold: +7 777 772 21 70\n–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ!")

def handle_essay(message):
    user_id = str(message.from_user.id)
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    os.makedirs(ESSAY_DIR, exist_ok=True)
    essay_path = f"{ESSAY_DIR}/{user_id}_{today}.txt"
    with open(essay_path, "w", encoding="utf-8") as f:
        f.write(message.text)

    data = get_today_words()
    used_words = check_word_usage(data["words"], message.text)

    # üîÅ GPT —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama
    response = requests.post("http://localhost:11434/api/generate", json={
        "model": "llama3",
        "prompt": f"Check this English essay for grammar, style, and structure:\n\n{message.text}",
        "stream": False
    })
    feedback = response.json().get("response", "").strip()

    # Save progress
    with open(PROGRESS_PATH, "a", encoding="utf-8") as f:
        f.write(f"{user_id},{today},{len(data['words'])},{len(used_words)},yes\n")

    # Update repetition
    missed = [w["word"] for w in data["words"] if w["word"] not in used_words]
    with open(REPETITION_PATH, encoding="utf-8") as f:
        rep = json.load(f)
    rep.setdefault(user_id, []).extend(missed)
    rep[user_id] = list(set(rep[user_id]))
    with open(REPETITION_PATH, "w", encoding="utf-8") as f:
        json.dump(rep, f, ensure_ascii=False, indent=2)

    bot.send_message(message.chat.id, f"üìù –≠—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–æ.\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ–≤: {len(used_words)} –∏–∑ {len(data['words'])}")
    bot.send_message(message.chat.id, f"üìä GPT –∞–Ω–∞–ª–∏–∑:\n{feedback}")

bot.polling()
